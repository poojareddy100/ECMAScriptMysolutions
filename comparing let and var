let was introduced in ES6 

1. The variable declared using var can be overridden where as variable written using let cannot be it shows an error. One has to "use strict" because This enables Strict Mode,
which catches common coding mistakes and "unsafe" actions.
2. When you declare a variable with the var keyword, it is declared globally, or locally if declared inside a function.

The let keyword behaves similarly, but with some extra features. When you declare a variable with the let keyword inside a block, statement, 
or expression, its scope is limited to that block, statement, or expression.

if one uses var:
var numArray = [];
for (var i = 0; i < 3; i++) {
  numArray.push(i);
}
console.log(numArray);
console.log(i);
///the above code is same as the below code ///
var numArray = [];
var i;
for (i = 0; i < 3; i++) {
  numArray.push(i);
}
console.log(numArray);
console.log(i);

The above behaviour will cause problems if you were to create a function and store it for later use inside a for loop that uses the i variable. 
This is because the stored function will always refer to the value of the updated global i variable.

var printNumTwo;
for (var i = 0; i < 3; i++) {
  if (i === 2) {
    printNumTwo = function() {
      return i;
    };
  }
}
console.log(printNumTwo());
The above code gives output as 3 not 2
his is because the value assigned to i was updated and the printNumTwo() returns the global i and not the value i had when the function was created in the for loop.
The let keyword does not follow this behavior:

let printNumTwo;
for (let i = 0; i < 3; i++) {
  if (i === 2) {
    printNumTwo = function() {
      return i;
    };
  }
}
console.log(printNumTwo());
console.log(i);
i is not defined because it was not declared in the global scope. It is only declared within the for loop statement. printNumTwo() returned the
correct value because three different i variables with unique values 
(0, 1, and 2) were created by the let keyword within the loop statement.
